# -*- coding: utf-8 -*-
"""
Human Expert System
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É-—ç–∫—Å–ø–µ—Ä—Ç—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
"""
import logging
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
from queue import Queue
import threading

logger = logging.getLogger(__name__)


class BackupSystem:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º-—ç–∫—Å–ø–µ—Ä—Ç–æ–º"""
    
    def __init__(self, data_dir: str = "/app/data"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        self.queue_file = self.data_dir / "expert_queue.json"
        self.history_file = self.data_dir / "expert_history.json"
        
        self.pending_requests = []
        self.load_queue()
    
    def request_human_help(
        self,
        problem_type: str,
        description: str,
        error_log: str = None,
        code_snippet: str = None,
        context: Dict = None,
        priority: str = "normal"
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–º–æ—â—å —á–µ–ª–æ–≤–µ–∫—É
        
        Args:
            problem_type: –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (syntax_error, logic_error, deployment, etc)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            error_log: –õ–æ–≥ –æ—à–∏–±–∫–∏
            code_snippet: –ö–æ–¥ —Å –ø—Ä–æ–±–ª–µ–º–æ–π
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            priority: low, normal, high, critical
        """
        request_id = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
        
        request = {
            "id": request_id,
            "type": problem_type,
            "description": description,
            "error_log": error_log,
            "code_snippet": code_snippet,
            "context": context or {},
            "priority": priority,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "resolved_at": None,
            "solution": None,
            "attempts": 0
        }
        
        self.pending_requests.append(request)
        self.save_queue()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
        logger.warning(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë               üÜò –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨ –≠–ö–°–ü–ï–†–¢–ê                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ID: {request_id}
‚ïë –¢–∏–ø: {problem_type}
‚ïë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.upper()}
‚ïë 
‚ïë –ü–†–û–ë–õ–ï–ú–ê:
‚ïë {description}
‚ïë
‚ïë {'–õ–û–ì –û–®–ò–ë–ö–ò:' if error_log else ''}
‚ïë {error_log if error_log else ''}
‚ïë
‚ïë –î–ï–ô–°–¢–í–ò–Ø:
‚ïë 1. –û—Ç–∫—Ä–æ–π—Ç–µ UI –∞–≥–µ–Ω—Ç–∞
‚ïë 2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–∞"
‚ïë 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å #{request_id}
‚ïë 4. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
        
        return {
            "success": True,
            "request_id": request_id,
            "status": "pending",
            "message": "–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞."
        }
    
    def submit_solution(
        self,
        request_id: str,
        solution: str,
        notes: str = ""
    ) -> Dict[str, Any]:
        """–ß–µ–ª–æ–≤–µ–∫ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ"""
        try:
            request = self._find_request(request_id)
            
            if not request:
                return {"success": False, "error": "Request not found"}
            
            if request["status"] == "resolved":
                return {"success": False, "error": "Already resolved"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            request["status"] = "resolved"
            request["solution"] = solution
            request["notes"] = notes
            request["resolved_at"] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(request)
            self.pending_requests.remove(request)
            self.save_queue()
            
            logger.info(f"‚úÖ Request {request_id} resolved by human expert")
            
            return {
                "success": True,
                "request_id": request_id,
                "solution": solution
            }
            
        except Exception as e:
            logger.error(f"Error submitting solution: {e}")
            return {"success": False, "error": str(e)}
    
    def get_pending_requests(
        self,
        priority_filter: str = None
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        requests = self.pending_requests.copy()
        
        if priority_filter:
            requests = [r for r in requests if r["priority"] == priority_filter]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        priority_order = {"critical": 0, "high": 1, "normal": 2, "low": 3}
        requests.sort(
            key=lambda x: (priority_order.get(x["priority"], 99), x["created_at"])
        )
        
        return requests
    
    def get_request_details(self, request_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        return self._find_request(request_id)
    
    def cancel_request(self, request_id: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–∞–≥–µ–Ω—Ç —Ä–µ—à–∏–ª —Å–∞–º)"""
        request = self._find_request(request_id)
        
        if not request:
            return {"success": False, "error": "Not found"}
        
        request["status"] = "cancelled"
        request["resolved_at"] = datetime.now().isoformat()
        
        self.pending_requests.remove(request)
        self.save_to_history(request)
        self.save_queue()
        
        return {"success": True}
    
    def get_history(self, limit: int = 20) -> List[Dict[str, Any]]:
        """–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —ç–∫—Å–ø–µ—Ä—Ç—É"""
        try:
            if self.history_file.exists():
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                return history[-limit:]
            return []
        except Exception as e:
            logger.error(f"Error loading history: {e}")
            return []
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        history = self.get_history(limit=100)
        
        total = len(history)
        resolved = len([h for h in history if h["status"] == "resolved"])
        cancelled = len([h for h in history if h["status"] == "cancelled"])
        
        avg_resolution_time = 0
        if resolved > 0:
            times = []
            for h in history:
                if h["status"] == "resolved" and h["resolved_at"]:
                    created = datetime.fromisoformat(h["created_at"])
                    resolved_dt = datetime.fromisoformat(h["resolved_at"])
                    times.append((resolved_dt - created).total_seconds())
            
            if times:
                avg_resolution_time = sum(times) / len(times)
        
        return {
            "total_requests": total,
            "pending": len(self.pending_requests),
            "resolved": resolved,
            "cancelled": cancelled,
            "avg_resolution_time_seconds": round(avg_resolution_time, 2)
        }
    
    def _find_request(self, request_id: str) -> Optional[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –∑–∞–ø—Ä–æ—Å –ø–æ ID"""
        for req in self.pending_requests:
            if req["id"] == request_id:
                return req
        return None
    
    def load_queue(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.queue_file.exists():
                with open(self.queue_file, 'r', encoding='utf-8') as f:
                    self.pending_requests = json.load(f)
        except Exception as e:
            logger.error(f"Error loading queue: {e}")
            self.pending_requests = []
    
    def save_queue(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.queue_file, 'w', encoding='utf-8') as f:
                json.dump(self.pending_requests, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Error saving queue: {e}")
    
    def save_to_history(self, request: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            history = []
            if self.history_file.exists():
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
            
            history.append(request)
            
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Error saving to history: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
human_expert = HumanExpertSystem()
