"""
Self-Modification System –¥–ª—è II-Agent Pro
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≥–µ–Ω—Ç—É –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
"""

import ast
import os
import shutil
import subprocess
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)


class SelfModifier:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    """
    
    def __init__(self):
        self.main_file = Path("main.py")
        self.backup_dir = Path("backups/self_modifications")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        logger.info("üîß SelfModifier initialized")
    
    def backup_current_state(self) -> Path:
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è main.py"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = self.backup_dir / f"main_{timestamp}.py"
        shutil.copy2(self.main_file, backup_file)
        logger.info(f"üíæ Backup created: {backup_file}")
        return backup_file
    
    def add_import(self, import_statement: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å import –≤ –Ω–∞—á–∞–ª–æ main.py"""
        try:
            with open(self.main_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –µ—â—ë –Ω–µ—Ç
            if import_statement in content:
                logger.info(f"‚ÑπÔ∏è Import already exists: {import_statement}")
                return True
            
            # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
            tree = ast.parse(content)
            imports = [node for node in tree.body 
                      if isinstance(node, (ast.Import, ast.ImportFrom))]
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç
            if imports:
                last_import_line = imports[-1].end_lineno
                lines = content.split('\n')
                lines.insert(last_import_line, import_statement)
                new_content = '\n'.join(lines)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                new_content = import_statement + '\n' + content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.main_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            logger.info(f"‚úÖ Import added: {import_statement}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to add import: {e}")
            return False
    
    def add_endpoint(self, endpoint_code: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ main.py"""
        try:
            with open(self.main_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ if __name__ == "__main__")
            insert_line = None
            for i in range(len(lines)-1, -1, -1):
                if 'if __name__ == "__main__"' in lines[i]:
                    insert_line = i - 1
                    break
            
            if insert_line is None:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                insert_line = len(lines)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ —Å –æ—Ç—Å—Ç—É–ø–æ–º
            lines.insert(insert_line, '\n' + endpoint_code + '\n')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.main_file, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            logger.info(f"‚úÖ Endpoint added")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to add endpoint: {e}")
            return False
    
    def create_module(self, filename: str, code: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            module_path = Path(filename)
            with open(module_path, 'w', encoding='utf-8') as f:
                f.write(code)
            
            logger.info(f"‚úÖ Module created: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create module: {e}")
            return False
    
    def add_dependency(self, package: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ requirements.txt"""
        try:
            req_file = Path("requirements.txt")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            with open(req_file, 'r', encoding='utf-8') as f:
                existing = f.read()
            
            package_name = package.split('==')[0].split('>=')[0]
            if package_name in existing:
                logger.info(f"‚ÑπÔ∏è Dependency already exists: {package}")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º
            with open(req_file, 'a', encoding='utf-8') as f:
                f.write(f"\n{package}")
            
            logger.info(f"‚úÖ Dependency added: {package}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to add dependency: {e}")
            return False
    
    def test_syntax(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å main.py"""
        try:
            result = subprocess.run(
                ['python', '-m', 'py_compile', str(self.main_file)],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Syntax check passed")
                return True
            else:
                logger.error(f"‚ùå Syntax error: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Syntax check failed: {e}")
            return False
    
    def restore_from_backup(self, backup_path: Path) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            shutil.copy2(backup_path, self.main_file)
            logger.info(f"‚Ü©Ô∏è Restored from backup: {backup_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to restore: {e}")
            return False
    
    async def self_modify(self, modification_request: Dict) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            modification_request: {
                "action": "add_feature",
                "module_name": "telegram_notifier",
                "module_code": "...",
                "import_statement": "from telegram_notifier import TelegramNotifier",
                "endpoint_code": "@app.post('/notify/telegram')...",
                "dependencies": ["python-telegram-bot==21.0"]
            }
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        
        logger.info(f"üîß Self-modification started: {modification_request.get('action')}")
        
        # 1. –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø
        backup_path = self.backup_current_state()
        
        try:
            # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if modification_request.get("module_code"):
                success = self.create_module(
                    f"{modification_request['module_name']}.py",
                    modification_request['module_code']
                )
                if not success:
                    raise Exception("Failed to create module")
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
            if modification_request.get("import_statement"):
                success = self.add_import(modification_request['import_statement'])
                if not success:
                    raise Exception("Failed to add import")
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if modification_request.get("endpoint_code"):
                success = self.add_endpoint(modification_request['endpoint_code'])
                if not success:
                    raise Exception("Failed to add endpoint")
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
            for dep in modification_request.get("dependencies", []):
                success = self.add_dependency(dep)
                if not success:
                    logger.warning(f"‚ö†Ô∏è Failed to add dependency: {dep}")
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            if not self.test_syntax():
                raise Exception("Syntax check failed")
            
            logger.info("‚úÖ Self-modification completed successfully")
            
            return {
                "status": "success",
                "message": "Agent successfully modified",
                "backup": str(backup_path),
                "note": "Restart Docker container to apply changes: docker-compose restart backend"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Self-modification failed: {e}")
            
            # –û—Ç–∫–∞—Ç –∫ –±—ç–∫–∞–ø—É
            self.restore_from_backup(backup_path)
            
            return {
                "status": "failed",
                "error": str(e),
                "message": "Modification failed, rolled back to backup",
                "backup_restored": str(backup_path)
            }
