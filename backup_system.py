# -*- coding: utf-8 -*-
"""
Backup System with Git
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å Git-–≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import git
import os
import logging
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)


class BackupSystem:
    """–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ Git"""
    
    def __init__(self, repo_path="/app"):
        self.repo_path = Path(repo_path)
        self.repo = None
        self.backup_metadata_file = self.repo_path / ".backup_metadata.json"
        self.init_git()
    
    def init_git(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å .gitignore"""
        try:
            if not (self.repo_path / ".git").exists():
                logger.info("üì¶ Initializing Git repository...")
                self.repo = git.Repo.init(self.repo_path)
                
                # ‚úÖ FIX: Configure git to trust this directory
                with self.repo.config_writer() as git_config:
                    git_config.set_value("safe", "directory", str(self.repo_path))
                    git_config.set_value("user", "name", "II-Agent Backup System")
                    git_config.set_value("user", "email", "backup@ii-agent.local")
                
                # –°–æ–∑–¥–∞—ë–º .gitignore
                gitignore_content = """
# Python
__pycache__/
*.py[cod]
*.so
.Python

# Logs
logs/
*.log

# Docker
.dockerignore

# Temp files
*.tmp
*.bak
.DS_Store
"""
                gitignore_path = self.repo_path / ".gitignore"
                gitignore_path.write_text(gitignore_content.strip())
                
                # –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
                self.repo.index.add([".gitignore"])
                self.repo.index.commit("üéâ Initial commit - Backup system initialized")
                
                logger.info("‚úÖ Git repository initialized")
            else:
                self.repo = git.Repo(self.repo_path)
                
                # ‚úÖ FIX: Ensure existing repo is trusted
                with self.repo.config_writer() as git_config:
                    git_config.set_value("safe", "directory", str(self.repo_path))
                
                logger.info("‚úÖ Git repository loaded")
                
        except Exception as e:
            logger.error(f"‚ùå Git init error: {e}")
            logger.warning("‚ö†Ô∏è Backup system will run without Git versioning")
            self.repo = None

    
    def create_backup(
        self, 
        message: str = "Auto backup",
        author: str = "II-Agent",
        tags: List[str] = None,
        critical: bool = False
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            message: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            author: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –±—ç–∫–∞–ø
            tags: –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            critical: –ö—Ä–∏—Ç–∏—á–Ω—ã–π –±—ç–∫–∞–ø (–Ω–µ —É–¥–∞–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not self.repo.is_dirty(untracked_files=True):
                logger.info("‚ÑπÔ∏è  No changes to backup")
                return {
                    "success": True,
                    "message": "No changes detected",
                    "skipped": True
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            changed_files = [item.a_path for item in self.repo.index.diff(None)]
            untracked_files = self.repo.untracked_files
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.repo.git.add(A=True)
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–∏—Ç
            commit_message = f"{message} [{timestamp}]\n\nAuthor: {author}"
            if tags:
                commit_message += f"\nTags: {', '.join(tags)}"
            
            commit = self.repo.index.commit(commit_message)
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ–≥
            tag_name = f"backup_{timestamp}"
            if critical:
                tag_name = f"critical_{timestamp}"
            
            self.repo.create_tag(tag_name, message=message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "timestamp": timestamp,
                "commit": str(commit),
                "tag": tag_name,
                "message": message,
                "author": author,
                "tags": tags or [],
                "critical": critical,
                "changed_files": changed_files,
                "untracked_files": untracked_files,
                "date": datetime.now().isoformat()
            }
            
            self._save_metadata(metadata)
            
            logger.info(f"‚úÖ Backup created: {tag_name}")
            logger.info(f"   Changed files: {len(changed_files)}")
            logger.info(f"   New files: {len(untracked_files)}")
            
            return {
                "success": True,
                "commit": str(commit),
                "tag": tag_name,
                "timestamp": timestamp,
                "changed_files": len(changed_files) + len(untracked_files),
                "metadata": metadata
            }
            
        except Exception as e:
            logger.error(f"‚ùå Backup creation failed: {e}")
            return {"success": False, "error": str(e)}
    
    def rollback(
        self, 
        tag_name: Optional[str] = None,
        confirm: bool = False
    ) -> Dict[str, Any]:
        """
        –û—Ç–∫–∞—Ç –∫ –±—ç–∫–∞–ø—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        
        Args:
            tag_name: –ò–º—è —Ç–µ–≥–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (None = –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–∏—Ç)
            confirm: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞)
        """
        try:
            if not confirm:
                return {
                    "success": False,
                    "error": "Rollback requires confirmation",
                    "message": "Set confirm=True to proceed"
                }
            
            # –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º
            pre_rollback = self.create_backup(
                message="Pre-rollback backup",
                critical=True
            )
            
            if tag_name:
                # –û—Ç–∫–∞—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–≥—É
                logger.warning(f"üîô Rolling back to tag: {tag_name}")
                self.repo.git.checkout(tag_name, force=True)
                target = tag_name
            else:
                # –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–æ–º–º–∏—Ç—É
                logger.warning("üîô Rolling back to previous commit")
                self.repo.git.reset('--hard', 'HEAD~1')
                target = "HEAD~1"
            
            logger.info(f"‚úÖ Rolled back to: {target}")
            
            return {
                "success": True,
                "rolled_back_to": target,
                "pre_rollback_backup": pre_rollback.get('tag')
            }
            
        except Exception as e:
            logger.error(f"‚ùå Rollback failed: {e}")
            return {"success": False, "error": str(e)}
    
    def list_backups(
        self, 
        limit: int = 10,
        include_critical_only: bool = False
    ) -> List[Dict[str, Any]]:
        """–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            tags = sorted(
                self.repo.tags, 
                key=lambda t: t.commit.committed_datetime, 
                reverse=True
            )
            
            backups = []
            for tag in tags:
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º
                if include_critical_only and not tag.name.startswith('critical_'):
                    continue
                
                backup_info = {
                    "tag": tag.name,
                    "date": tag.commit.committed_datetime.isoformat(),
                    "message": tag.commit.message.split('\n')[0],
                    "commit": str(tag.commit),
                    "critical": tag.name.startswith('critical_')
                }
                
                backups.append(backup_info)
                
                if len(backups) >= limit:
                    break
            
            return backups
            
        except Exception as e:
            logger.error(f"‚ùå Error listing backups: {e}")
            return []
    
    def get_diff(
        self, 
        tag_name: str,
        current: bool = True
    ) -> Dict[str, Any]:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –±—ç–∫–∞–ø–æ–º –∏ —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        try:
            if current:
                # Diff —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                diff = self.repo.git.diff(tag_name)
            else:
                # Diff —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–º–º–∏—Ç–æ–º
                diff = self.repo.git.diff(f"{tag_name}~1", tag_name)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self.repo.git.diff(tag_name, '--stat')
            
            return {
                "success": True,
                "diff": diff,
                "stats": stats,
                "tag": tag_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting diff: {e}")
            return {"success": False, "error": str(e)}
    
    def cleanup_old_backups(
        self, 
        days: int = 30,
        keep_critical: bool = True,
        dry_run: bool = True
    ) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            deleted = []
            kept = []
            
            for tag in self.repo.tags:
                tag_date = tag.commit.committed_datetime.replace(tzinfo=None)
                is_critical = tag.name.startswith('critical_')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                should_delete = (
                    tag_date < cutoff_date and
                    not (is_critical and keep_critical)
                )
                
                if should_delete:
                    if not dry_run:
                        self.repo.delete_tag(tag)
                        logger.info(f"üóëÔ∏è  Deleted old backup: {tag.name}")
                    deleted.append(tag.name)
                else:
                    kept.append(tag.name)
            
            return {
                "success": True,
                "deleted": len(deleted),
                "kept": len(kept),
                "deleted_tags": deleted if dry_run else deleted,
                "dry_run": dry_run
            }
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup failed: {e}")
            return {"success": False, "error": str(e)}
    
    def restore_file(
        self, 
        filepath: str,
        tag_name: str
    ) -> Dict[str, Any]:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            self.repo.git.checkout(tag_name, '--', filepath)
            
            logger.info(f"‚úÖ File restored: {filepath} from {tag_name}")
            
            return {
                "success": True,
                "file": filepath,
                "from_backup": tag_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå File restore failed: {e}")
            return {"success": False, "error": str(e)}
    
    def get_backup_info(self, tag_name: str) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ"""
        try:
            tag = self.repo.tags[tag_name]
            commit = tag.commit
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if commit.parents:
                diff = commit.parents[0].diff(commit)
                changed_files = [item.a_path for item in diff]
            else:
                changed_files = []
            
            return {
                "success": True,
                "tag": tag_name,
                "commit": str(commit),
                "author": commit.author.name,
                "date": commit.committed_datetime.isoformat(),
                "message": commit.message,
                "changed_files": changed_files,
                "file_count": len(changed_files)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting backup info: {e}")
            return {"success": False, "error": str(e)}
    
    def _save_metadata(self, metadata: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞"""
        try:
            import json
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if self.backup_metadata_file.exists():
                with open(self.backup_metadata_file, 'r') as f:
                    all_metadata = json.load(f)
            else:
                all_metadata = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            all_metadata.append(metadata)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.backup_metadata_file, 'w') as f:
                json.dump(all_metadata, f, indent=2)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Could not save metadata: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
backup_system = BackupSystem()
